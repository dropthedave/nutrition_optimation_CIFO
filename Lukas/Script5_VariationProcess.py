from Script1_Data import nutrients, commodities
import numpy as np

def swap_mutation(population, commodities=commodities, mutation_rate=0.1):
    return

def crossover(population, commodities=commodities):
    """
    Crossover function for genetic algorithm.
    Takes a population of binary chromosomes (represented as nested NumPy arrays)
    and returns a new population generated by performing a random crossover operation
    between pairs of chromosomes.
    """
    new_population = np.empty((0,len(commodities)))
    num_parents = len(population)
    num_genes = len(population[0])
    for i in range(num_parents):
        parent1 = population[np.random.randint(0, num_parents)]
        parent2 = population[np.random.randint(0, num_parents)]
        crossover_point = np.random.randint(0, num_genes)
        child = np.concatenate((parent1[:crossover_point], parent2[crossover_point:]))
        child_2d = np.reshape(child, (1,len(commodities)))
        new_population = np.append(new_population, child_2d, axis=0)
    return new_population
